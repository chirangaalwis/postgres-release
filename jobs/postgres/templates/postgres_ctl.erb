#!/bin/bash -exu

exec > >(tee -a >(logger -p user.info -t vcap.$(basename $0).stdout) | awk -W interactive '{ system("echo -n [$(date +\"%Y-%m-%d %H:%M:%S%z\")]"); print " " $0 }' >> /var/vcap/sys/log/postgres/$(basename $0).log)
exec 2> >(tee -a >(logger -p user.error -t vcap.$(basename $0).stderr) | awk -W interactive '{ system("echo -n [$(date +\"%Y-%m-%d %H:%M:%S%z\")]"); print " " $0 }' >> /var/vcap/sys/log/postgres/$(basename $0).err.log)

function main() {
  local action
  action="${1}"

  source /var/vcap/jobs/postgres/bin/pgconfig.sh
  set +u
  source /var/vcap/packages/postgres-common/utils.sh
  set -u

  case "${action}" in
   "start")

      pid_guard "${CONTROL_JOB_PIDFILE}" "Postgres control job" "false"
      if [ "$?" != "0" ]; then
        echo "WARNING: Postgres control job is already running with pid `cat ${CONTROL_JOB_PIDFILE}`. Exiting."
        exit 0
      fi
      echo $$ > ${CONTROL_JOB_PIDFILE}
      if [ -d $DATA_DIR -a -f $POSTGRES_UPGRADE_LOCK ]; then
        echo "FAIL: DB upgrade stopped in the middle, manual intervention required, quitting..."
        exit 1
      fi

      if [ -d "${DATA_DIR_OLD}" -a -f "${DATA_DIR_OLD}/postgresql.conf" ]; then
        set +e
        "${PACKAGE_DIR}/bin/pg_ctl" stop -m fast -w -D ${DATA_DIR}
        "${PACKAGE_DIR_OLD}/bin/pg_ctl" stop -m fast -w -D ${DATA_DIR_OLD}
        set -e
      fi

      pid_guard "${PIDFILE}" "PostgreSQL"

      # TODO: This script is responsible for both
      # starting PostgreSQL and running some queries
      # (create DBs, roles, applying grants). One problem
      # that needs to be addressed in the future is that
      # if some queries fail job is still considered running.
      # Later we'll change it to use a more involved approach
      # (i.e. script that brings DB to sync)

      mkdir -p "${RUN_DIR}"

      echo "" > "${PIDFILE}"

      echo "Running pre-start actions"
      run-parts -v --exit-on-error "${JOB_DIR}/bin/pre-start.d"

      echo "Starting PostgreSQL: "

      "${PACKAGE_DIR}/bin/pg_ctl" -o "-h ${HOST} -p ${PORT}" \
         -w start -D "${DATA_DIR}" -l "${DATA_DIR}/pg_log/startup.log"

      echo "PostgreSQL started successfully"

      echo "Running post-start actions"
      run-parts -v --exit-on-error "${JOB_DIR}/bin/post-start.d"
      echo "All actions completed successfully"

      echo "" > "${CONTROL_JOB_PIDFILE}"
      ;;

    "stop")
      echo "Stopping PostgreSQL: "
      for dir in ${pgversion_older} ${pgversion_old} ${pgversion_current}; do
        if [ -d "${STORE_DIR}/${dir}" -a -f "${STORE_DIR}/${dir}/postgresql.conf" ]; then
          set +e
          su - vcap -c "${PACKAGE_DIR}/${dir}/bin/pg_ctl stop -m fast -w -D ${STORE_DIR}/${dir}"
          set -e
        fi
      done

      if [ -d "${DATA_DIR_OLD}" -a -f "${DATA_DIR_OLD}/postgresql.conf" ]; then
        set +e
         su - vcap -c "${PACKAGE_DIR_OLD}/bin/pg_ctl stop -m fast -w -D ${DATA_DIR_OLD}"
        set -e
      fi

      set +e
      su - vcap -c "${PACKAGE_DIR}/bin/pg_ctl stop -m fast -w -D ${DATA_DIR}"
      set -e

      set +u
      wait_pidfile "${PIDFILE}"
      set -u

      ;;

    *)
      echo "Usage: ${0} {start|stop|status}"
      exit 1

      ;;

  esac
}

main "${1}"
